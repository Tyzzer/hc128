#![no_std]

extern crate byteorder;

mod util;
mod ops;

pub use ops::Hc128Rng;


/// ```
/// use hc128::HC128;
/// let mut output = [0; 64];
///
/// let mut key = [0; 16];
/// key[0] = 0x80;
/// HC128::new(&key, &[0; 16]).process(&[0; 64], &mut output);
/// assert_eq!(
///     output[..32],
///     [
///         0x37, 0x86, 0x02, 0xB9, 0x8F, 0x32, 0xA7, 0x48, 0x47, 0x51, 0x56, 0x54, 0xAE, 0x0D, 0xE7, 0xED,
///         0x8F, 0x72, 0xBC, 0x34, 0x77, 0x6A, 0x06, 0x51, 0x03, 0xE5, 0x15, 0x95, 0x52, 0x1F, 0xFE, 0x47
///     ]
/// );
/// assert_eq!(
///     output[32..],
///     [
///         0xF9, 0xAF, 0x0A, 0x4C, 0xB4, 0x79, 0x99, 0xCF, 0xA2, 0x6D, 0x33, 0xBF, 0x80, 0x95, 0x45, 0x98,
///         0x9D, 0x53, 0xDE, 0xBF, 0xE7, 0xA9, 0xEF, 0xD8, 0xB9, 0x10, 0x9C, 0xA6, 0xEF, 0xAD, 0xDF, 0x83
///     ]
/// );
///
/// HC128::new(
///     &[0x0F, 0x62, 0xB5, 0x08, 0x5B, 0xAE, 0x01, 0x54, 0xA7, 0xFA, 0x4D, 0xA0, 0xF3, 0x46, 0x99, 0xEC],
///     &[0x28, 0x8F, 0xF6, 0x5D, 0xC4, 0x2B, 0x92, 0xF9, 0x60, 0xC7, 0x2E, 0x95, 0xFC, 0x63, 0xCA, 0x31]
/// ).process(&[0; 32], &mut output);
/// assert_eq!(
///     output[..32],
///     [
///         0x1C, 0xD8, 0xAE, 0xDD, 0xFE, 0x52, 0xE2, 0x17, 0xE8, 0x35, 0xD0, 0xB7, 0xE8, 0x4E, 0x29, 0x22,
///         0xD0, 0x4B, 0x1A, 0xDB, 0xCA, 0x53, 0xC4, 0x52, 0x2B, 0x1A, 0xA6, 0x04, 0xC4, 0x28, 0x56, 0xA9
///     ]
/// );
///
/// let output = HC128::new(
///     &[0x0F, 0x62, 0xB5, 0x08, 0x5B, 0xAE, 0x01, 0x54, 0xA7, 0xFA, 0x4D, 0xA0, 0xF3, 0x46, 0x99, 0xEC],
///     &[0x28, 0x8F, 0xF6, 0x5D, 0xC4, 0x2B, 0x92, 0xF9, 0x60, 0xC7, 0x2E, 0x95, 0xFC, 0x63, 0xCA, 0x31]
/// ).skip(65472).take(32).collect::<Vec<u8>>();
/// assert_eq!(
///     output,
///     [
///         0xBB, 0x59, 0x9F, 0x93, 0xF4, 0xF2, 0x44, 0xD7, 0x17, 0xCA, 0x98, 0x18, 0x21, 0x2B, 0x06, 0xD5,
///         0x6D, 0x99, 0xAD, 0x4C, 0xA1, 0xF7, 0x87, 0x25, 0xDB, 0xA8, 0x9E, 0xA1, 0xD1, 0xF0, 0x5B, 0x27
///     ]
/// );
/// ```
pub struct HC128 {
    inner: Hc128Rng,
    buff: [u8; 64],
    index: usize
}

impl HC128 {
    pub fn new(key: &[u8], iv: &[u8]) -> HC128 {
        let mut ukey = [0; 8];
        let mut uiv = [0; 8];
        util::u8_to_u32(key, &mut ukey[..4]);
        util::u8_to_u32(iv, &mut uiv[..4]);
        for i in 4..8 {
            ukey[i] = ukey[i - 4];
            uiv[i] = uiv[i - 4];
        }

        HC128 {
            inner: Hc128Rng::init(&ukey, &uiv),
            buff: [0; 64],
            index: 64
        }
    }

    pub fn process(&mut self, input: &[u8], output: &mut [u8]) {
        for (i, k) in self.take(input.len()).enumerate() {
            output[i] = input[i] ^ k;
        }
    }
}

impl Iterator for HC128 {
    type Item = u8;

    fn next(&mut self) -> Option<Self::Item> {
        if self.index >= self.buff.len() {
            util::u32_to_u8(&self.inner.gen(), &mut self.buff);
            self.index = 0;
            self.next()
        } else {
            let output = self.buff[self.index];
            self.index += 1;
            Some(output)
        }
    }
}
